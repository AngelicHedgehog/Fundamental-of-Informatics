(define-syntax derivative
  (syntax-rules (+ - * / expt sqrt exp log sin cos tan asin acos atan)
    ((derivative '(+ f . o)) (simplify `(+ ,(derivative 'f)
                                           ,(if (null? 'o) 0 (derivative '(+ . o))))))
    ((derivative '(- f . o)) (if (null? 'o)
                                 (simplify `(- ,(derivative 'f)))
                                 (simplify `(- ,(derivative 'f) ,(derivative '(+ . o))))))
    ((derivative '(* f . o)) (if (null? 'o)
                                 (simplify (derivative 'f))
                                 (simplify `(+
                                             (* ,(derivative 'f) (* . o))
                                             (* ,(derivative '(* . o)) f)))))
    ((derivative '(/ f . o)) (if (null? 'o)
                                 (simplify `(- (expt ,(derivative 'f) -2)))
                                 (simplify `(/ (-
                                                (* ,(derivative 'f) (* . o))
                                                (* ,(derivative '(* . o)) f))
                                               (expt (* . o) 2)))))
    ((derivative '(expt f g)) (simplify `(* (expt f g) (+ (* ,(derivative 'f) (/ g f)) (* ,(derivative 'g) (log f))))))
    ((derivative '(sqrt f)) (simplify (derivative '(expt f 0.5))))
    ((derivative '(exp f)) (simplify `(* ,(derivative 'f) (exp f))))
    ((derivative '(log f)) (simplify `(/ ,(derivative 'f) f)))
    ((derivative '(sin f)) (simplify `(* (cos f) ,(derivative 'f))))
    ((derivative '(cos f)) (simplify `(* (- (sin f)) ,(derivative 'f))))
    ((derivative '(tan f)) (simplify (derivative '(/ (sin f) (cos f)))))
    ((derivative '(asin f)) (simplify `(/ ,(derivative 'f) (sqrt (- 1 (expt f 2))))))
    ((derivative '(acos f)) (simplify `(- ,(derivative '(asin f)))))
    ((derivative '(atan f)) (simplify `(/ ,(derivative 'f) (+ 1 (expt f 2)))))
    ((derivative 'f) (if (number? 'f) 0 1))
    ))


(define-syntax simplify
  (syntax-rules (+ - * / expt sqrt exp log sin cos tan asin acos atan)
    ((simplify '(+ f)) (simplify 'f))
    ((simplify '(- f)) (let ((ff (simplify 'f)))
                         (if (number? ff) (- ff) `(- ,ff))))
    ((simplify '(* f)) (simplify 'f))
    ((simplify '(/ f)) (let ((ff (simplify 'f)))
                         (if (number? ff) (/ ff) `(/ ,ff))))
    ((simplify '(+ f g)) (let ((ff (simplify 'f)) (gg (simplify 'g)))
                           (cond ((and (number? ff) (number? gg)) (+ ff gg))
                                 ((equal? ff 0) gg)
                                 ((equal? gg 0) ff)
                                 ((equal? ff gg) (simplify `(* ,ff 2)))
                                 (else `(+ ,ff ,gg)))))
    ((simplify '(- f g)) (let ((ff (simplify 'f)) (gg (simplify 'g)))
                           (cond ((and (number? ff) (number? gg)) (- ff gg))
                                 ((equal? ff 0) (simplify `(- ,gg)))
                                 ((equal? gg 0) ff)
                                 ((equal? ff gg) 0)
                                 (else `(- ,ff ,gg)))))
    ((simplify '(* f g)) (let ((ff (simplify 'f)) (gg (simplify 'g)))
                           (cond ((and (number? ff) (number? gg)) (* ff gg))
                                 ((or (equal? ff 0) (equal? gg 0)) 0)
                                 ((equal? ff 1) gg)
                                 ((equal? gg 1) ff)
                                 ((equal? ff gg) (simplify `(expt ,ff 2)))
                                 (else `(* ,ff ,gg)))))
    ((simplify '(/ f g)) (let ((ff (simplify 'f)) (gg (simplify 'g)))
                           (cond ((and (number? ff) (number? gg)) (/ ff gg))
                                 ((equal? ff 0) 0)
                                 ((equal? gg 1) ff)
                                 ((equal? ff gg) 1)
                                 (else `(/ ,ff ,gg)))))
    ((simplify '(expt (expt f g) h)) (simplify '(expt f (* g h))))
    ((simplify '(expt f g)) (let ((ff (simplify 'f)) (gg (simplify 'g)))
                              (cond ((and (number? ff) (number? gg)) (expt ff gg))
                                    ((equal? ff 0) 0)
                                    ((equal? ff 1) 1)
                                    ((equal? gg 0) 1)
                                    ((equal? gg 1) ff)
                                    (else `(expt ,ff ,gg)))))
    ((simplify '(exp (log f))) (simplify 'f))
    ((simplify '(log (exp f))) (simplify 'f))
    ((simplify '(sqrt a)) `(sqrt ,(simplify 'a)))
    ((simplify '(exp a)) `(exp ,(simplify 'a)))
    ((simplify '(log a)) `(log ,(simplify 'a)))
    ((simplify '(sin a)) `(sin ,(simplify 'a)))
    ((simplify '(cos a)) `(cos ,(simplify 'a)))
    ((simplify '(tan a)) `(tan ,(simplify 'a)))
    ((simplify '(asin a)) `(asin ,(simplify 'a)))
    ((simplify '(acos a)) `(acos ,(simplify 'a)))
    ((simplify '(atan a)) `(atan ,(simplify 'a)))
    ((simplify 'f) 'f)
    ))

(define-syntax flatten
  (syntax-rules ()
    ((_ x) (flatten () x))
    ((_ cache ((a . b) . c) . t) (flatten cache (a b . c) . t))
    ((_ cache (() . c) . t) (flatten cache c . t))
    ((_ cache (a . c) . t) (flatten (a . cache) c . t))
    ((_ rez ()) (flatten () rez #t))
    ((_ rez () #t) rez)))

